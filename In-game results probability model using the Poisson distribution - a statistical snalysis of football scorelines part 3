{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# In-game results probability model using the Poisson distribution - a statistical snalysis of football scorelines\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "In a previous report, the popular phrase ‘2-0 is the most dangerous lead in football’ was investigated. Unsurprisingly to most readers, a two goal lead was found to actually be a very safe lead. However this report did raise the questions: What about the quality of the teams involved? What about home advantage?\n",
    "\n",
    "This report aims to showcase a model that will take these factors into account. Using the Poisson distribution, this model will be capable of finding in-game win, draw and loss probabilities at any minute of the game. Data from the first 37 gameweeks of the 2019/20 Premier League season will be used to create the model which will then be used to give in-game win probabilities for any game in the final week. The accuracy of the model will then be discussed.\n",
    "\n",
    "# Inspiration\n",
    "\n",
    "The inspiration for this project comes from a project completed by Benjamin Cronin that can be viewed here. https://www.pinnacle.com/en/betting-articles/Soccer/how-to-calculate-poisson-distribution/MD62MLXUMKMXZ6A8\n",
    "\n",
    "There are a few clear differences in the two models: for this report the model will calculate in-game win probabilities rather than pre-game win probabilities and expected goals will be used rather than goals scored. To understand what expected goals are and why they will be used please read the previous report.\n",
    "\n",
    "First the relevant packages are installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import FuncFormatter\n",
    "from itertools import chain\n",
    "import statistics\n",
    "from scipy.stats import poisson\n",
    "import scipy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data\n",
    "\n",
    "The data for the model comes from two sources, both of which have been used in previous reports.\n",
    "\n",
    "The training dataset that will allow us to assign attacking quality and defending quality scores comes from:\n",
    "https://github.com/fivethirtyeight/data/tree/master/soccer-spi \n",
    "\n",
    "The dataset is a CSV containing games from multiple leagues across different years, the data of interest for this report is Premier League data from 2019/20. This data is extracted and entered into a dataframe with 370 rows and 6 columns: Each row represents an individual game and the columns represent: \n",
    "\n",
    "- team1; the home team’s name\n",
    "- team2; the away team’s name\n",
    "- score1; the number of goals scored by the home team\n",
    "- score2; the number of goals scored by the away team\n",
    "- xg1; the total xG for the home team\n",
    "- xg2; the total xG for the away team\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = pd.read_csv(\"/Users//ConorSharpe/Downloads/spi_matches (1).csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team1</th>\n",
       "      <th>team2</th>\n",
       "      <th>score1</th>\n",
       "      <th>score2</th>\n",
       "      <th>xg1</th>\n",
       "      <th>xg2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>Norwich City</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.65</td>\n",
       "      <td>0.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>West Ham United</td>\n",
       "      <td>Manchester City</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.27</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Burnley</td>\n",
       "      <td>Southampton</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.97</td>\n",
       "      <td>1.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AFC Bournemouth</td>\n",
       "      <td>Sheffield United</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.46</td>\n",
       "      <td>1.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Crystal Palace</td>\n",
       "      <td>Everton</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.88</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             team1             team2  score1  score2   xg1   xg2\n",
       "0        Liverpool      Norwich City     4.0     1.0  1.65  0.88\n",
       "1  West Ham United   Manchester City     0.0     5.0  1.27  2.99\n",
       "2          Burnley       Southampton     3.0     0.0  0.97  1.16\n",
       "3  AFC Bournemouth  Sheffield United     1.0     1.0  1.46  1.28\n",
       "4   Crystal Palace           Everton     0.0     0.0  0.88  1.42"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#take only 2019/20 Premier League Season\n",
    "df_train = df_train[df_train.season == 2019]\n",
    "df_train = df_train[df_train.league == 'Barclays Premier League']\n",
    "\n",
    "#Include only the relevant columns\n",
    "df_train = df_train[['team1', 'team2', 'score1', 'score2','xg1','xg2']]\n",
    "df_train = df_train.reset_index()\n",
    "df_train = df_train.drop(columns=['index'])\n",
    "\n",
    "#Take the first 37 gameweeks of the season\n",
    "df_train = df_train[0:370]\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset that contains goal times comes from:\n",
    "https://footystats.org/\n",
    "\n",
    "Premier League match data ranging from the 2007/08 season to the 2018/19 season will be used. This comes in the form of 12 CSV files (one for each season), these are combined into a larger data frame containing 4560 rows and 2 columns. Each row represents a single game. The columns represent:\n",
    "\n",
    "- home_team_goal_timings; the time (in minutes) that each goal was scored by the home team, separated by commas.\n",
    "- away_team_goal_timings; the time (in minutes) that each goal was scored by the away team , separated by commas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2007-to-2008-stats.csv\")\n",
    "df2 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2008-to-2009-stats.csv\")\n",
    "df3 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2009-to-2010-stats.csv\")\n",
    "df4 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2010-to-2011-stats.csv\")\n",
    "df5 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2011-to-2012-stats.csv\")\n",
    "df6 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2012-to-2013-stats.csv\")\n",
    "df7 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2013-to-2014-stats.csv\")\n",
    "df8 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2014-to-2015-stats.csv\")\n",
    "df9 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2015-to-2016-stats.csv\")\n",
    "df10 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2016-to-2017-stats.csv\")\n",
    "df11 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2017-to-2018-stats.csv\")\n",
    "df12 = pd.read_csv(\"/Users//ConorSharpe/Downloads/combine/england-premier-league-matches-2018-to-2019-stats.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home_team_goal_timings</th>\n",
       "      <th>away_team_goal_timings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90'3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>18,87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30</td>\n",
       "      <td>63,79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26,75</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4,84</td>\n",
       "      <td>27,83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  home_team_goal_timings away_team_goal_timings\n",
       "0                   90'3                    NaN\n",
       "1                    NaN                  18,87\n",
       "2                     30                  63,79\n",
       "3                  26,75                     80\n",
       "4                   4,84                  27,83"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " #Combine dataframes\n",
    "df_goal_timings = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12])\n",
    "df_goal_timings = df_goal_timings.reset_index()\n",
    "\n",
    "\n",
    "#Include only the relevant columns\n",
    "df_goal_timings = pd.DataFrame({'home_team_goal_timings' : df_goal_timings['home_team_goal_timings'],\n",
    "                                             'away_team_goal_timings' : df_goal_timings['away_team_goal_timings'], }) #Create dataframe with only relevant columns\n",
    "\n",
    "df_goal_timings.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Methodology\n",
    "\n",
    "The model will be used to find win probabilities for games in the final gameweek of the 2019/20 Premier League season. Because of this the data from that week is not used to assign attacking quality and defending quality to the teams. This is to prevent the events from that week skewing the probabilities. Because of this the first 370 games (37 gameweeks) are used for training data. \n",
    "\n",
    "In the previous report (here), the possibility of using the poisson distribution to model goals scored in football was discussed and found to be suitable. \n",
    "\n",
    "The model will calculate the probability of a home win, draw and away win at a given minutes played using the poisson distribution, to do this five inputs are required:\n",
    "\n",
    "- home_team: name of the home team \n",
    "- away_team: name of the away team \n",
    "- home_team_goals: number of goals scored by the home team at the desired minutes played \n",
    "- away_team_goals:  number of goals scored by the away team at the desired minutes played \n",
    "- Minutes_played: number of minutes that have been played  \n",
    "\n",
    "Using the imputed minutes played, the model will find the proportion of goals scored after this time. Before this can be done, the data must be formatted.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90'3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26</td>\n",
       "      <td>75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>84</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4555</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4556</th>\n",
       "      <td>17</td>\n",
       "      <td>81</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4557</th>\n",
       "      <td>46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4558</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4559</th>\n",
       "      <td>27</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4560 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0    1    2    3    4    5    6    7    8\n",
       "0     90'3  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "1      NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "2       30  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "3       26   75  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "4        4   84  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "...    ...  ...  ...  ...  ...  ...  ...  ...  ...\n",
       "4555   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "4556    17   81  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "4557    46  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "4558   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "4559    27  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN\n",
       "\n",
       "[4560 rows x 9 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_home_goal_timings = df_goal_timings.home_team_goal_timings.str.split(\",\").apply(pd.Series)\n",
    "df_away_goal_timings = df_goal_timings.away_team_goal_timings.str.split(\",\").apply(pd.Series)\n",
    "df_home_goal_timings    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create goal timings lists\n",
    "home_goal_timings_list = []\n",
    "for column in df_home_goal_timings:\n",
    "    home_goal_timings = df_home_goal_timings[column]\n",
    "    home_goal_timings_list.append(home_goal_timings)\n",
    "    \n",
    "away_goal_timings_list = []\n",
    "for column in df_away_goal_timings:\n",
    "    away_goal_timings = df_away_goal_timings[column]\n",
    "    away_goal_timings_list.append(away_goal_timings)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove list nesting\n",
    "home_goal_timings_list = list(chain.from_iterable(home_goal_timings_list))\n",
    "away_goal_timings_list = list(chain.from_iterable(away_goal_timings_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Combine lists\n",
    "goal_timings_list = home_goal_timings_list + away_goal_timings_list\n",
    "\n",
    "#Convert to dataframe\n",
    "df_home_goal_timings_list = pd.DataFrame({'goal_timings' : goal_timings_list })\n",
    "\n",
    "#Remove NaN, extra time and covert to intergers\n",
    "df_home_goal_timings_list = df_home_goal_timings_list.dropna()\n",
    "df_home_goal_timings_list['goal_timings'] = df_home_goal_timings_list['goal_timings'].str[:2]\n",
    "df_home_goal_timings_list['goal_timings'] = df_home_goal_timings_list['goal_timings'].astype(int)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is a graph showing the distribution of goal timings in Premier League games from 2007/08 to 2018/19. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of goal timings in the Premier League from 2007/08 to 2018/19')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,6))\n",
    "\n",
    "plt.hist(df_home_goal_timings_list['goal_timings'] , bins = np.arange(0, 91, step=1))\n",
    "\n",
    "plt.xticks(np.arange(0, 100, 10))\n",
    "plt.tick_params(axis='both', which='major', labelsize=18)\n",
    "plt.xlabel('Goal timing', fontsize=18)\n",
    "plt.ylabel('Frequency', fontsize=18)\n",
    "\n",
    "plt.title('Distribution of goal timings in the Premier League from 2007/08 to 2018/19', fontsize=18)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distribution appears fairly uniform with large peaks at 45 and 90 minutes. This is because all goals scored in added time are considered to have been scored in the 45th or 90th minute, this is done to maintain consistency as the length of added time varies from game to game. The number of goals scored in the first few minutes of each half is lower than at other time periods and slightly more goals are scored in the second half than in the first.\n",
    "\n",
    "The function goals_after(t) is created to find the proportion of goals scored after t minutes played. For example, looking at the proportion of goals scored after 12 minutes:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def goals_after (t):\n",
    "    total = sum(x > t for x in df_home_goal_timings_list['goal_timings'])\n",
    "    freq = total / len(df_home_goal_timings_list['goal_timings'])\n",
    "    \n",
    "    return(freq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9029525653436592"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "goals_after(12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see 0.9 of goals are scored after this point.\n",
    "\n",
    "Next, attacking quality and defending quality scores will be found for each team. To find the attacking score for a team, their mean xG per game is divided by the league mean xG per game. The attacking score represents how many times more xG a team scores than the league average. A score of 1 represents a perfectly average attacking team, if the score is above 1 the team is above average and below 1 they are below average. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_home_xg = statistics.mean(df_train['xg1'].tolist())\n",
    "avg_away_xg = statistics.mean(df_train['xg2'].tolist())\n",
    "\n",
    "avg_xg = statistics.mean(df_train['xg1'].tolist() + df_train['xg2'].tolist())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "games_played = (len(df_train) / 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "home_xg_scored_total = df_train.groupby(['team1']).sum()['xg1']\n",
    "away_xg_scored_total = df_train.groupby(['team2']).sum()['xg2']\n",
    "\n",
    "xg_scored_total = home_xg_scored_total + away_xg_scored_total\n",
    "xg_scored_average = xg_scored_total / games_played\n",
    "attacking_score = xg_scored_average / statistics.mean(xg_scored_total/games_played)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The same process is done to find the defending scores, where a score of below 1 represents an above average team and above one represents a below average team. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "home_xg_concede_total = df_train.groupby(['team1']).sum()['xg2']\n",
    "away_xg_concede_total = df_train.groupby(['team2']).sum()['xg1']\n",
    "\n",
    "xg_concede_total = home_xg_concede_total + away_xg_concede_total\n",
    "xg_concede_average = xg_concede_total / games_played\n",
    "defending_score = xg_concede_average / statistics.mean(xg_concede_total / games_played)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The attacking and defending scores of all 20 Premier League teams from the 2019/20 season is shown below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>attacking_score</th>\n",
       "      <th>defending_score</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>team1</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AFC Bournemouth</th>\n",
       "      <td>0.827783</td>\n",
       "      <td>1.151038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Arsenal</th>\n",
       "      <td>0.924083</td>\n",
       "      <td>1.029155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aston Villa</th>\n",
       "      <td>0.847883</td>\n",
       "      <td>1.324452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brighton and Hove Albion</th>\n",
       "      <td>0.873466</td>\n",
       "      <td>1.062413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burnley</th>\n",
       "      <td>0.904348</td>\n",
       "      <td>1.012526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chelsea</th>\n",
       "      <td>1.422032</td>\n",
       "      <td>0.767115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Crystal Palace</th>\n",
       "      <td>0.663323</td>\n",
       "      <td>1.099873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Everton</th>\n",
       "      <td>0.936875</td>\n",
       "      <td>0.883699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leicester City</th>\n",
       "      <td>1.160175</td>\n",
       "      <td>0.897770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Liverpool</th>\n",
       "      <td>1.538068</td>\n",
       "      <td>0.759258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manchester City</th>\n",
       "      <td>1.875577</td>\n",
       "      <td>0.690733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manchester United</th>\n",
       "      <td>1.151952</td>\n",
       "      <td>0.726548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Newcastle</th>\n",
       "      <td>0.681779</td>\n",
       "      <td>1.244963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Norwich City</th>\n",
       "      <td>0.651628</td>\n",
       "      <td>1.269450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sheffield United</th>\n",
       "      <td>0.829245</td>\n",
       "      <td>0.989136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Southampton</th>\n",
       "      <td>0.954417</td>\n",
       "      <td>1.074290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tottenham Hotspur</th>\n",
       "      <td>1.024039</td>\n",
       "      <td>1.018557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Watford</th>\n",
       "      <td>0.845142</td>\n",
       "      <td>1.046515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Ham United</th>\n",
       "      <td>0.905262</td>\n",
       "      <td>1.256110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wolverhampton</th>\n",
       "      <td>0.982924</td>\n",
       "      <td>0.696397</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          attacking_score  defending_score\n",
       "team1                                                     \n",
       "AFC Bournemouth                  0.827783         1.151038\n",
       "Arsenal                          0.924083         1.029155\n",
       "Aston Villa                      0.847883         1.324452\n",
       "Brighton and Hove Albion         0.873466         1.062413\n",
       "Burnley                          0.904348         1.012526\n",
       "Chelsea                          1.422032         0.767115\n",
       "Crystal Palace                   0.663323         1.099873\n",
       "Everton                          0.936875         0.883699\n",
       "Leicester City                   1.160175         0.897770\n",
       "Liverpool                        1.538068         0.759258\n",
       "Manchester City                  1.875577         0.690733\n",
       "Manchester United                1.151952         0.726548\n",
       "Newcastle                        0.681779         1.244963\n",
       "Norwich City                     0.651628         1.269450\n",
       "Sheffield United                 0.829245         0.989136\n",
       "Southampton                      0.954417         1.074290\n",
       "Tottenham Hotspur                1.024039         1.018557\n",
       "Watford                          0.845142         1.046515\n",
       "West Ham United                  0.905262         1.256110\n",
       "Wolverhampton                    0.982924         0.696397"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_score = pd.DataFrame({'attacking_score' : attacking_score,\n",
    "                        'defending_score' : defending_score,\n",
    "                        })\n",
    "\n",
    "df_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the table Manchester City have the strongest attacking score and defending score followed by Liverpool in both categories. Crystal Palace, Newcastle and Norwich all have particularly poor attacking scores and Aston Villa, Newcastle and Norwich have particularly poor defending scores. Surprisingly (or maybe not depending on who you ask), Arsenal have a below average attacking score and a below average defending score.\n",
    "\n",
    "This scoring system was developed by Benjamin Cronin in the article linked above. However, for this project xG is used rather than actual goals scored. As well as this, Cronin assigns a home attacking score, away attacking score, home defending score and away defending score to each team whereas for this project just an attacking score and defensive are used. This is done in order to maintain a larger sample size by not splitting it up any more than necessary. In this case there is 37 gameweeks of training data so sample size is not an issue. However if this model was to be used in an earlier portion of the season, when fewer games have been played, this adjustment becomes necessary.\n",
    "\n",
    "Once the attacking and defending scores have been assigned, the final model can be created. \n",
    "The poisson distribution will be used to estimate the probabilities of how many more goals each team will score. To do this for the home team, the point estimate for the parameter $\\lambda$ will be: \n",
    "\n",
    "(home team’s attacking score)$\\times$(away team’s defending score)$\\times$(league mean number of home xG)$\\times$( the proportion of goals scored after the given time)\n",
    "\n",
    "To calculate the probability of of how many more goals will be scored for the away team, the point estimate for the parameter $\\lambda$ will be: \n",
    "\n",
    "(away team’s attacking score)$\\times$(home team’s defending score)$\\times$(league mean number of away xG)$\\times$( the proportion of goals scored after the given time) \n",
    "\n",
    "After the goal probabilities are calculated the model creates an array with the probability of every possible goal combination. From here, the model looks at the current goal difference of the game and sums the probability of each goal combination for each result (home win, away win, draw).\n",
    "\n",
    "Again, this method of calculating win probabilities is adapted from the one used by Cronin. The large difference is that Cronin’s model looks at pre-game win probabilities whereas this model considers in-game probabilities. It does this by multiplying the point estimate by the proportion of goals scored after the imputed time. This adjustment to the point estimate is valid by the Poisson Process. If someone was interested in looking at the pre-game win probability this can be done by setting minutes played, home goals and away goals all to zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def model (home_team, away_team, home_team_goals, away_team_goals, minutes_played):\n",
    "    \n",
    "    #Find scores of given teams\n",
    "    home_attacking_score = df_score.loc[home_team, 'attacking_score']\n",
    "    away_attacking_score = df_score.loc[away_team, 'attacking_score']\n",
    "    home_defending_score = df_score.loc[home_team, 'defending_score']\n",
    "    away_defending_score = df_score.loc[away_team, 'defending_score']\n",
    "    goal_difference = home_team_goals - away_team_goals\n",
    "    \n",
    "    \n",
    "    #Create list of probabilities for home team goals\n",
    "    def home_team_goals (home_attacking_score, away_defending_score):\n",
    "        prob_list = []\n",
    "        for j in range(0,10):\n",
    "            prob = scipy.stats.distributions.poisson.pmf(j, home_attacking_score*away_defending_score*avg_home_xg*goals_after(minutes_played))\n",
    "            prob_list.append(prob)\n",
    "    \n",
    "        return(prob_list)\n",
    "    \n",
    "    #Create list of probabilities for away team goals\n",
    "    def away_team_goals (away_attacking_score, home_defending_score):\n",
    "        prob_list = []\n",
    "        for j in range(0,10):\n",
    "            prob = scipy.stats.distributions.poisson.pmf(j, away_attacking_score*home_defending_score*avg_away_xg*goals_after(minutes_played))\n",
    "            prob_list.append(prob)\n",
    "    \n",
    "        return(prob_list)\n",
    "    \n",
    "    #Create array with all possible scoreline combinations\n",
    "    prob_array = np.outer(np.asarray(home_team_goals(home_attacking_score, away_defending_score)),np.asarray(away_team_goals(away_attacking_score, home_defending_score)))\n",
    "    \n",
    "    #Sum relevant scoreline combination\n",
    "    draw = np.diagonal(prob_array, offset = goal_difference).sum() \n",
    "    \n",
    "    home = 0\n",
    "    for h in range(-(goal_difference) + 1,10):\n",
    "        prob_h = np.diagonal(prob_array, offset = -h).sum()\n",
    "        home = home + prob_h\n",
    "   \n",
    "    away = 0\n",
    "    for a in range((goal_difference) + 1,10):\n",
    "        prob_a = np.diagonal(prob_array, offset = a).sum()\n",
    "        away = away + prob_a\n",
    "    \n",
    "   \n",
    "    \n",
    "    return(home, draw, away)  \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Findings\n",
    "\n",
    "In order to demonstrate the application of this model, below is a graph showing the in-game win probabilities for the Arsenal vs Watford game that took place on the final day of the season. The Arsenal win, Watford win and draw probabilities are shown for the 90 minute game. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "arsenal_list = []\n",
    "draw_list = []\n",
    "watford_list = []\n",
    "\n",
    "for i in range(0,5):\n",
    "    arsenal_prob = model('Arsenal','Watford',0,0,i)[0]\n",
    "    draw_prob = model('Arsenal','Watford',0,0,i)[1]\n",
    "    watford_prob = model('Arsenal','Watford',0,0,i)[2]\n",
    "    \n",
    "    arsenal_list.append(arsenal_prob)\n",
    "    draw_list.append(draw_prob)\n",
    "    watford_list.append(watford_prob)\n",
    "\n",
    "for i in range(5,24):\n",
    "    arsenal_prob = model('Arsenal','Watford',1,0,i)[0]\n",
    "    draw_prob = model('Arsenal','Watford',1,0,i)[1]\n",
    "    watford_prob = model('Arsenal','Watford',1,0,i)[2]\n",
    "    \n",
    "    arsenal_list.append(arsenal_prob)\n",
    "    draw_list.append(draw_prob)\n",
    "    watford_list.append(watford_prob) \n",
    "    \n",
    "for i in range(24, 33):\n",
    "    arsenal_prob = model('Arsenal','Watford',2,0,i)[0]\n",
    "    draw_prob = model('Arsenal','Watford',2,0,i)[1]\n",
    "    watford_prob = model('Arsenal','Watford',2,0,i)[2]\n",
    "    \n",
    "    arsenal_list.append(arsenal_prob)\n",
    "    draw_list.append(draw_prob)\n",
    "    watford_list.append(watford_prob)    \n",
    "    \n",
    "for i in range(33, 43):\n",
    "    arsenal_prob = model('Arsenal','Watford',3,0,i)[0]\n",
    "    draw_prob = model('Arsenal','Watford',3,0,i)[1]\n",
    "    watford_prob = model('Arsenal','Watford',3,0,i)[2]\n",
    "    \n",
    "    arsenal_list.append(arsenal_prob)\n",
    "    draw_list.append(draw_prob)\n",
    "    watford_list.append(watford_prob)   \n",
    "    \n",
    "for i in range(43, 66):\n",
    "    arsenal_prob = model('Arsenal','Watford',3,1,i)[0]\n",
    "    draw_prob = model('Arsenal','Watford',3,1,i)[1]\n",
    "    watford_prob = model('Arsenal','Watford',3,1,i)[2]\n",
    "    \n",
    "    arsenal_list.append(arsenal_prob)\n",
    "    draw_list.append(draw_prob)\n",
    "    watford_list.append(watford_prob) \n",
    "    \n",
    "for i in range(66, 91):\n",
    "    arsenal_prob = model('Arsenal','Watford',3,2,i)[0]\n",
    "    draw_prob = model('Arsenal','Watford',3,2,i)[1]\n",
    "    watford_prob = model('Arsenal','Watford',3,2,i)[2]\n",
    "    \n",
    "    arsenal_list.append(arsenal_prob)\n",
    "    draw_list.append(draw_prob)\n",
    "    watford_list.append(watford_prob)    \n",
    "            \n",
    "            \n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '-20%'),\n",
       " Text(0, 0, '0%'),\n",
       " Text(0, 0, '20%'),\n",
       " Text(0, 0, '40%'),\n",
       " Text(0, 0, '60%'),\n",
       " Text(0, 0, '80%'),\n",
       " Text(0, 0, '100%'),\n",
       " Text(0, 0, '120%')]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,10))\n",
    "\n",
    "plt.plot(arsenal_list, color = 'red', linewidth = 3.5, label = 'Arsenal Win ')\n",
    "plt.plot(draw_list, color = 'grey', linewidth = 3.5, label = 'Draw')\n",
    "plt.plot(watford_list, color = 'gold', linewidth = 3.5, label = 'Watford Win')\n",
    "plt.legend(loc='upper left' , prop={'size': 13})\n",
    "\n",
    "plt.plot([0, 90], [0, 0], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.1, 0.1], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.2, 0.2], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.3, 0.3], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.4, 0.4], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.5, 0.5], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.6, 0.6], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.7, 0.7], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.8, 0.8], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.9, 0.9], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [1, 1], color = 'black', alpha=0.5)\n",
    "\n",
    "plt.xlim(0,90)\n",
    "\n",
    "plt.tick_params(axis='both', which='major', labelsize=18)\n",
    "\n",
    "plt.title('Minute by minute result probability for Arsenal vs Watford 26/07/2020', fontsize=18)\n",
    "plt.xlabel('Minutes Played', fontsize=18)\n",
    "plt.ylabel('Probability', fontsize=18)\n",
    "plt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()]) \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the graph the pre-game probability for Arsenal winning was approximately 45% with the probability of a draw approximately 25% and a Watford win approximately 30%. Each jump in the probabilities represents a goal being scored. In this game Arsenal took a 3-0 goal lead, this is visible in the three jumps in their win probability which peaked at 97%. Watford then scored two goals to make it 3-2, this can be seen in the two sharp drops in Arsenal win probability and jumps in the draw and Watford win probability.\n",
    "\n",
    "The model has real world applications for individuals looking to make a profit betting. If there is ever a discrepancy in the probabilities provided by the model and the bookmaker odds, then this would be a sensible time to place a bet. By being able to calculate in-game probabilities as well as pre-game probability, this model increases the possible number of times in which this discrepancy arises and therefore increases an individual’s chance of finding potentially lucrative betting opportunities. The model also has application for decision makers within football clubs because knowing your team’s chance of winning, drawing or losing can be used to shape tactical choices.\n",
    "\n",
    "\n",
    "# Model Diagnostics\n",
    "\n",
    "In order to assess the quality of the results produced by the model we will compare its results to the results of the scoreline probability model produced in a previous article. The scoreline probability model uses the actual results of games to find the results probabilities. Since the previous model did not take into account team quality, a slightly altered model will be used. Each team’s attacking and defending score will be set to 1 (the average) and the home advantage constant is removed.\n",
    "\n",
    "The code used for the model in a previous report is run.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def model_comparison ( home_team_goals, away_team_goals, minutes_played):\n",
    "    \n",
    "    #Find scores of given teams\n",
    "    home_attacking_score = 1\n",
    "    away_attacking_score = 1\n",
    "    home_defending_score = 1\n",
    "    away_defending_score = 1\n",
    "    \n",
    "\n",
    "    goal_difference = home_team_goals - away_team_goals\n",
    "    \n",
    "    \n",
    "    #Create list of probabilities for home team goals\n",
    "    def home_team_goals (home_attacking_score, away_defending_score):\n",
    "        prob_list = []\n",
    "        for j in range(0,10):\n",
    "            prob = scipy.stats.distributions.poisson.pmf(j, home_attacking_score*away_defending_score*avg_xg*goals_after(minutes_played))\n",
    "            prob_list.append(prob)\n",
    "    \n",
    "        return(prob_list)\n",
    "    \n",
    "    #Create list of probabilities for away team goals\n",
    "    def away_team_goals (away_attacking_score, home_defending_score):\n",
    "        prob_list = []\n",
    "        for j in range(0,10):\n",
    "            prob = scipy.stats.distributions.poisson.pmf(j, away_attacking_score*home_defending_score*avg_xg*goals_after(minutes_played))\n",
    "            prob_list.append(prob)\n",
    "    \n",
    "        return(prob_list)\n",
    "    \n",
    "    #Create array with all possible scoreline combinations\n",
    "    prob_array = np.outer(np.asarray(home_team_goals(home_attacking_score, away_defending_score)),np.asarray(away_team_goals(away_attacking_score, home_defending_score)))\n",
    "    \n",
    "    #Sum relevant scoreline combination\n",
    "    draw = np.diagonal(prob_array, offset = goal_difference).sum() \n",
    "    \n",
    "    home = 0\n",
    "    for h in range(-(goal_difference) + 1,10):\n",
    "        prob_h = np.diagonal(prob_array, offset = -h).sum()\n",
    "        home = home + prob_h\n",
    "   \n",
    "    away = 0\n",
    "    for a in range((goal_difference) + 1,10):\n",
    "        prob_a = np.diagonal(prob_array, offset = a).sum()\n",
    "        away = away + prob_a\n",
    "    \n",
    "   \n",
    "    \n",
    "    return(home, draw, away)  \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "no_lead_list = []\n",
    "one_goal_list = []\n",
    "two_goal_list = []\n",
    "\n",
    "for i in range (0,91):\n",
    "    no_lead_prob = model_comparison (0, 0, i)[0]\n",
    "    one_goal_prob = model_comparison (1, 0, i)[0]\n",
    "    two_goal_prob = model_comparison (2, 0, i)[0]\n",
    "    \n",
    "    no_lead_list.append(no_lead_prob)\n",
    "    one_goal_list.append(one_goal_prob)\n",
    "    two_goal_list.append(two_goal_prob)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_comp = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12]) #Combine dataframes\n",
    "df_comp = df_comp.reset_index()\n",
    "\n",
    "df_comp = pd.DataFrame({'home_team_name' : df_comp['home_team_name'],\n",
    "                    'away_team_name' : df_comp['away_team_name'],\n",
    "                    'home_team_goal_count' : df_comp['home_team_goal_count'],\n",
    "                    'away_team_goal_count' : df_comp['away_team_goal_count'],\n",
    "                    'home_team_goal_timings' : df_comp['home_team_goal_timings'],\n",
    "                    'away_team_goal_timings' : df_comp['away_team_goal_timings'], }) #Create dataframe with only relevant columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "HGT = df_comp.home_team_goal_timings.str.split(\",\").apply(pd.Series)\n",
    "HGT.columns = ['hg1', 'hg2', 'hg3', 'hg4', 'hg5', 'hg6', 'hg7', 'hg8', 'hg9'] #Split goal times into seperate columns\n",
    "\n",
    "HGT['hg1'] = HGT['hg1'].str[:2]\n",
    "HGT['hg2'] = HGT['hg2'].str[:2]    \n",
    "HGT['hg3'] = HGT['hg3'].str[:2]\n",
    "HGT['hg4'] = HGT['hg4'].str[:2]\n",
    "HGT['hg5'] = HGT['hg5'].str[:2]\n",
    "HGT['hg6'] = HGT['hg6'].str[:2]\n",
    "HGT['hg7'] = HGT['hg7'].str[:2]\n",
    "HGT['hg8'] = HGT['hg8'].str[:2]\n",
    "HGT['hg9'] = HGT['hg9'].str[:2] #Remove 'added time' from data\n",
    "\n",
    "HGT = HGT.fillna(99) # Replace NaN with 99\n",
    "HGT = HGT.astype(float) #Convert data to floats\n",
    "\n",
    "AGT = df_comp.away_team_goal_timings.str.split(\",\").apply(pd.Series)\n",
    "AGT.columns = ['ag1', 'ag2', 'ag3', 'ag4', 'ag5', 'ag6', 'ag7',]\n",
    "\n",
    "AGT['ag1'] = AGT['ag1'].str[:2]\n",
    "AGT['ag2'] = AGT['ag2'].str[:2]\n",
    "AGT['ag3'] = AGT['ag3'].str[:2]\n",
    "AGT['ag4'] = AGT['ag4'].str[:2]\n",
    "AGT['ag5'] = AGT['ag5'].str[:2]\n",
    "AGT['ag6'] = AGT['ag6'].str[:2]\n",
    "AGT['ag7'] = AGT['ag7'].str[:2]\n",
    "\n",
    "\n",
    "AGT = AGT.fillna(99)\n",
    "AGT = AGT.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_comp['goal_difference'] = df_comp['home_team_goal_count']-df_comp['away_team_goal_count'] #Create goal difference column\n",
    "\n",
    "df_comp['result'] = np.select([df_comp['goal_difference'] > 0, df_comp['goal_difference'] == 0, df_comp['goal_difference'] < 0],\n",
    "                        ['HOME', 'DRAW', 'AWAY']) #Create results column \n",
    "\n",
    "\n",
    "df_model = pd.concat([HGT, AGT], axis=1)\n",
    "df_model['result'] = df_comp['result']\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "def home_goals (t):\n",
    "            goals_list = []                #create empty list\n",
    "            for i in range(0,4559):\n",
    "                if (t >= df_model['hg9'][i]):\n",
    "                    goals = 9\n",
    "                elif (t >= df_model['hg8'][i]):\n",
    "                    goals = 8\n",
    "                elif (t >= df_model['hg7'][i]):\n",
    "                    goals = 7\n",
    "                elif (t >= df_model['hg6'][i]):\n",
    "                    goals = 6    \n",
    "                elif (t >= df_model['hg5'][i]):\n",
    "                    goals = 5\n",
    "                elif (t >= df_model['hg4'][i]):\n",
    "                    goals = 4\n",
    "                elif (t >= df_model['hg3'][i]):\n",
    "                    goals = 3\n",
    "                elif (t >= df_model['hg2'][i]):\n",
    "                    goals = 2\n",
    "                elif (t >= df_model['hg1'][i]):\n",
    "                    goals = 1\n",
    "                else: \n",
    "                    goals = 0          #find score at time t\n",
    "\n",
    "                goals_list.append(goals)  #add score to list\n",
    "\n",
    "            return(goals_list)          \n",
    "\n",
    "        \n",
    "def away_goals (t):\n",
    "            goals_list = []                #create empty list\n",
    "            for i in range(0,4559):\n",
    "                if (t >= df_model['ag7'][i]):\n",
    "                    goals = 7\n",
    "                elif (t >= df_model['ag6'][i]):\n",
    "                    goals = 6    \n",
    "                elif (t >= df_model['ag5'][i]):\n",
    "                    goals = 5\n",
    "                elif (t >= df_model['ag4'][i]):\n",
    "                    goals = 4\n",
    "                elif (t >= df_model['ag3'][i]):\n",
    "                    goals = 3\n",
    "                elif (t >= df_model['ag2'][i]):\n",
    "                    goals = 2\n",
    "                elif (t >= df_model['ag1'][i]):\n",
    "                    goals = 1\n",
    "                else: \n",
    "                    goals = 0          #find score at time x\n",
    "\n",
    "                goals_list.append(goals)  #add score to list\n",
    "\n",
    "            return(goals_list)  \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "def goal_diff (t):\n",
    "        return (np.asarray(home_goals(t)) - np.asarray(away_goals(t)) )  #find difference between home and away goals in each match at time x\n",
    "    \n",
    "def model (t, gd):\n",
    "\n",
    "    def win_prob (t): \n",
    "            home = df_comp['result'][np.where(goal_diff(t) == gd)[0]].tolist().count('HOME') #number of times the goal differnce is s and home team wins\n",
    "            away = df_comp['result'][np.where(goal_diff(t) == -gd)[0]].tolist().count('AWAY')  #number of times the goal differnce is -s and away team wins\n",
    "            total = len(np.where(goal_diff(t) == gd)[0].tolist()) + len(np.where(goal_diff(t) == -gd)[0].tolist()) #number of times the goal difference is s or -s\n",
    "\n",
    "            prob = (home + away) / total\n",
    "\n",
    "            return(prob)\n",
    "\n",
    "    def draw_prob (t): \n",
    "            home = df_comp['result'][np.where(goal_diff(t) == gd)[0]].tolist().count('DRAW') #number of times the goal differnce is s and the game is a draw\n",
    "            away = df_comp['result'][np.where(goal_diff(t) == -gd)[0]].tolist().count('DRAW')  #number of times the goal differnce is -s and the game is a draw\n",
    "            total = len(np.where(goal_diff(t) == gd)[0].tolist()) + len(np.where(goal_diff(t) == -gd)[0].tolist()) #number of times the goal difference is s or -s\n",
    "\n",
    "            prob = (home + away) / total\n",
    "\n",
    "            return(prob)\n",
    "\n",
    "    def lose_prob (t): \n",
    "            home = df_comp['result'][np.where(goal_diff(t) == gd)[0]].tolist().count('AWAY') #number of times the goal differnce is s and away team wins\n",
    "            away = df_comp['result'][np.where(goal_diff(t) == -gd)[0]].tolist().count('HOME')  #number of times the goal differnce is -s and home team wins\n",
    "            total = len(np.where(goal_diff(t) == gd)[0].tolist()) + len(np.where(goal_diff(t) == -gd)[0].tolist()) #number of times the goal difference is s or -s\n",
    "\n",
    "            prob = (home + away) / total\n",
    "\n",
    "            return(prob)\n",
    "    return([win_prob(t), draw_prob(t), lose_prob(t)])\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(10, 90 , 81)\n",
    "def plot_model(gd):\n",
    "    plot_list = []\n",
    "    for t in x:\n",
    "        plot = model(t, gd)[0]\n",
    "        \n",
    "        plot_list.append(plot)\n",
    "       \n",
    "    return(plot_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(10, 90 , 81)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_0 = plot_model(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_1 = plot_model(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_2 = plot_model(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph below shows a comparison of the two models with the solid lines representing the previous model and the dashed lines representing the model from this report.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0, '-20%'),\n",
       " Text(0, 0, '0%'),\n",
       " Text(0, 0, '20%'),\n",
       " Text(0, 0, '40%'),\n",
       " Text(0, 0, '60%'),\n",
       " Text(0, 0, '80%'),\n",
       " Text(0, 0, '100%'),\n",
       " Text(0, 0, '120%')]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,10))\n",
    "\n",
    "plt.plot(no_lead_list, color = 'red', linewidth = 3.5,  linestyle='dashed')\n",
    "plt.plot(one_goal_list, color = 'orange', linewidth = 3.5,  linestyle='dashed')\n",
    "plt.plot(two_goal_list, color = 'green', linewidth = 3.5,  linestyle='dashed')\n",
    "plt.plot(x, y_0, color = 'red', linewidth = 3.5, label = 'No lead ')\n",
    "plt.plot(x, y_1, color = 'orange', linewidth = 3.5, label = 'One goal lead')\n",
    "plt.plot(x, y_2, color = 'green', linewidth = 3.5, label = 'Two goal lead')\n",
    "plt.legend(loc='upper left' , prop={'size': 13})\n",
    "\n",
    "plt.plot([0, 90], [0, 0], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.1, 0.1], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.2, 0.2], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.3, 0.3], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.4, 0.4], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.5, 0.5], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.6, 0.6], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.7, 0.7], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.8, 0.8], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [0.9, 0.9], color = 'black', alpha=0.5)\n",
    "plt.plot([0, 90], [1, 1], color = 'black', alpha=0.5)\n",
    "\n",
    "plt.xlim(0,90)\n",
    "\n",
    "plt.tick_params(axis='both', which='major', labelsize=18)\n",
    "\n",
    "plt.title('The probability of winning a game of Premier League football based on the Minutes Played and current Goal Difference', fontsize=18)\n",
    "plt.xlabel('Minutes Played', fontsize=18)\n",
    "plt.ylabel('Win Probability', fontsize=18)\n",
    "plt.gca().set_yticklabels(['{:.0f}%'.format(x*100) for x in plt.gca().get_yticks()]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the graph, the two models produce very similar results.  With the Poisson model slightly under predicting the probability of winning with a one and two goal lead and over predicting the probability of winning with no lead. There is also a reasonable difference for the lines representing a two-goal lead in the earlier portion of the game, this is likely to be due to the small sample size of teams who are winning by two goals at an early stage of a match.\n",
    "\n",
    "Clearly this is only a small number of scenarios (probability of winning with a zero goal, one goal and two goal lead). However it demonstrates that the new model agrees with the model from the previous report, and therefore the actual results of games.\n",
    "\n",
    "The comparison between the two models shows that using the Poisson distribution for in-game results probability is suitable. But it does not tell us if the attacking and defending score constants used to modify the point estimate for are accurate. Because teams can change in terms of personnel, tactics and other features frequently throughout a season, the sample size of games is small. This makes it very difficult to test how accurate the constants used are, and therefore how accurate the model is.\n",
    "\n",
    "# Conclusion\n",
    "\n",
    "The report has introduced a model based on the Poisson distribution for calculating in-game results probabilities. This takes into account team quality, current scoreline, home advantage and minutes played. The model was demonstrated by giving the minute-by-minute result probabilities for the Arsenal vs Watford game that took place in gameweek 38 of the 2019/20 Premier League Season. The model was then compared to result probabilities based on real data from the multiple Premier League seasons. The result probabilities of both the real data model and the Poisson model were very similar suggesting the model was accurate. However, due to small sample size, it is very difficult to assess the accuracy of the team quality adjustment.\n"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
